@page "/clases/nueva"
@page "/clases/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IRepositorioClases _repositorioClases

<PageTitle>Clases</PageTitle>
<h3>Nombre de la clase a tomar</h3>

<EditForm Model="_clase" FormName="frmClase" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="mb-3 row">
        <label for="selectNombre" class="col-sm-2 col-form-label">Nombre</label>
        <div class="col-sm-10">
            <InputSelect id="selectNombre" class="form-control" @bind-Value="_clase.Nombre">
                <option value="" disabled selected hidden>-- Selecciona una clase --</option>
                @foreach (var clase in _opcionesClases)
                {
                    <option value="@clase">@clase</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _clase.Nombre)" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-10 offset-sm-2">
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Clase _clase = new();
    private string _titulo = "Nueva ";
    private List<string> _opcionesClases = new() { "Yoga", "Spinning", "Funcional", "Pilates" };

    override protected async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            _clase = await _repositorioClases.Get(Id);
            _titulo = "Modificar ";
        }
    }

    private void Guardar()
    {
        if (Id > 0)
        {
            _repositorioClases.Update(_clase);
        }
        else
        {
            _repositorioClases.Add(_clase);
        }
        Cancelar();
    }

    private void Cancelar()
    {
        _navigationManager.NavigateTo("/clases");
    }
}
