@page "/usuarios/nuevo"
@page "/usuarios/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IRepositorioUsuarios _repositorioUsuarios
@inject IRepositorioClases _repositorioClases
@inject IRepositorioEstilosVida _repositorioEstilosVida

<PageTitle>Usuarios</PageTitle>

<h3>@_mensaje Usuario</h3>

<EditForm Model="_usuario" FormName="frmUsuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="mb-3 row">
        <label for="txtNombre" class="col-sm-2 col-form-label">Nombre</label>
        <div class="col-sm-10">
            <InputText class="form-control" id="txtNombre" @bind-Value="_usuario.Nombre" />
            <ValidationMessage For="@(() => _usuario.Nombre)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="txtCorreo" class="col-sm-2 col-form-label">Correo</label>
        <div class="col-sm-10">
            <InputText class="form-control" id="txtCorreo" @bind-Value="_usuario.Correo" />
            <ValidationMessage For="@(() => _usuario.Correo)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="txtContrasena" class="col-sm-2 col-form-label">Contraseña</label>
        <div class="col-sm-10">
            <InputText type="password" class="form-control" id="txtContrasena" @bind-Value="_usuario.Contrasena" />
            <ValidationMessage For="@(() => _usuario.Contrasena)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="fechaRegistro" class="col-sm-2 col-form-label">Fecha de registro</label>
        <div class="col-sm-10">
            <InputDate class="form-control" id="fechaRegistro" @bind-Value="_usuario.FechaRegistro" />
            <ValidationMessage For="@(() => _usuario.FechaRegistro)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="tipoMembresia" class="col-sm-2 col-form-label">Tipo de Membresía</label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="_usuario.TipoMembresia" class="form-select">
                <option value="">Selecciona </option>
                <option value="Mensual">Mensual</option>
                <option value="Anual">Anual</option>
            </InputSelect>
            <ValidationMessage For="@(() => _usuario.TipoMembresia)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="estado" class="col-sm-2 col-form-label">Estado</label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="_usuario.Estado" class="form-select">
                <option value=""> Selecciona </option>
                <option value="Activa">Activa</option>
                <option value="Vencida">Vencida</option>
            </InputSelect>
            <ValidationMessage For="@(() => _usuario.Estado)" />
        </div>
    </div>

    <div class="mb-3 row">
        <label for="claseId" class="col-sm-2 col-form-label">Clase</label>
        <div class="col-sm-10">
            <InputSelect id="claseId" class="form-select" @bind-Value="_usuario.ClaseId">
                <option value="">Ninguna clase</option>
                @foreach (var clase in _clases)
                {
                    <option value="@clase.Id">@clase.Nombre</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="mb-3 row">
        <label class="col-sm-2 col-form-label">Estilos de Vida</label>
        <div class="col-sm-10">
            @foreach (var estilo in _estilosVida)
            {
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="estilo.Seleccionado" />
                    <label class="form-check-label">@estilo.Nombre</label>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-sm-10 offset-sm-2">
            <button type="submit" class="btn btn-primary">Guardar</button>
            <a class="btn btn-danger" href="/usuarios">Cancelar</a>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Usuario _usuario = new();
    private string _mensaje = "Nuevo ";
    private List<Clase> _clases = new();
    private List<EstiloVidaSeleccionado> _estilosVida = new();

    protected override async Task OnInitializedAsync()
    {
        _clases = await _repositorioClases.GetAll();
        var todosEstilos = await _repositorioEstilosVida.GetAll();

        if (Id > 0)
        {
            _usuario = await _repositorioUsuarios.Get(Id);
            _mensaje = "Modificar ";
            var estilosUsuario = _usuario.EstilosVida.Select(e => e.Id).ToList();
            _estilosVida = todosEstilos.Select(e => new EstiloVidaSeleccionado
                {
                    Id = e.Id,
                    Nombre = e.Nombre,
                    Seleccionado = estilosUsuario.Contains(e.Id)
                }).ToList();
        }
        else
        {
            _estilosVida = todosEstilos.Select(e => new EstiloVidaSeleccionado
                {
                    Id = e.Id,
                    Nombre = e.Nombre,
                    Seleccionado = false
                }).ToList();
        }
    }

    private async Task Guardar()
    {

        var soloSeleccionados = _estilosVida
            .Where(e => e.Seleccionado)
            .Select(e => new EstiloVida { Id = e.Id}) 
            .ToList();

        _usuario.EstilosVida = new();
        foreach(EstiloVida estilo in soloSeleccionados)
        {
            var _estilo = await _repositorioEstilosVida.GetById(estilo.Id);
            if (_estilo!=null)
            {
                _usuario.EstilosVida.Add(_estilo);
            }
        }

        if (Id > 0)
        {
            await _repositorioUsuarios.Update(_usuario);
        }
        else
        {
            await _repositorioUsuarios.Add(_usuario);
        }

        _navigationManager.NavigateTo("/usuarios");
    }

    public class EstiloVidaSeleccionado
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public bool Seleccionado { get; set; }
    }
}
